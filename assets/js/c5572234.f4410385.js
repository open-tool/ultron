"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[646],{1205:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>c,toc:()=>a});var t=n(4848),s=n(8453);const r={sidebar_position:2},i="Android",c={id:"compose/android",title:"Android",description:"Note: it's possible to use Multiplatform approach using methods runComposeUiTest and runUltronUiTest for Android UI tests.",source:"@site/docs/compose/android.md",sourceDirName:"compose",slug:"/compose/android",permalink:"/ultron/docs/compose/android",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Multiplatform",permalink:"/ultron/docs/compose/multiplatform"},next:{title:"Ultron Compose API",permalink:"/ultron/docs/compose/api"}},l={},a=[{value:"Android Compose testing API",id:"android-compose-testing-api",level:2},{value:"Ultron Compose",id:"ultron-compose",level:2}];function d(e){const o={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(o.h1,{id:"android",children:"Android"}),"\n",(0,t.jsxs)(o.p,{children:["Note: it's possible to use Multiplatform approach using methods ",(0,t.jsx)(o.code,{children:"runComposeUiTest"})," and ",(0,t.jsx)(o.code,{children:"runUltronUiTest"})," for Android UI tests.\nYou can read about it in ",(0,t.jsx)(o.a,{href:"/ultron/docs/compose/multiplatform",children:"multiplatform description"})]}),"\n",(0,t.jsx)(o.h2,{id:"android-compose-testing-api",children:"Android Compose testing API"}),"\n",(0,t.jsx)(o.p,{children:"Typical Android test looks smth like this:"}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-kotlin",children:'class ComposeContentTest {\n    @get:Rule\n    val composeTestRule = createComposeRule()\n    @Test\n    fun myTest() {\n        composeTestRule.setContent { .. } \n        composeTestRule.onNode(hasTestTag("Continue")).performClick()\n        composeTestRule.onNodeWithText("Welcome").assertIsDisplayed()\n    }\n}\n'})}),"\n",(0,t.jsxs)(o.p,{children:["You can read more about it in ",(0,t.jsx)(o.a,{href:"https://developer.android.com/jetpack/compose/testing",children:"official documentation"})]}),"\n",(0,t.jsxs)(o.p,{children:["So, all compose testing APIs are provided by ",(0,t.jsx)(o.code,{children:"composeTestRule"}),". It's definitely uncomfortable. Moreover, in case your UI loading takes some time, e.g. in integration test, an assertion or an action fails."]}),"\n",(0,t.jsxs)(o.p,{children:["If you need to launch an Activity it's required to use another factory method to create Compose TestRule - ",(0,t.jsx)(o.code,{children:"createAndroidComposeRule<A>"})]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-kotlin",children:'class ActivityComposeTest {\n    @get:Rule\n    val composeTestRule = createAndroidComposeRule<YourActivity>()\n    @Test\n    fun myTest() {\n        composeTestRule.onNode(hasTestTag("Continue")).performClick()\n        composeTestRule.onNodeWithText("Welcome").assertIsDisplayed()\n    }\n}\n'})}),"\n",(0,t.jsxs)(o.p,{children:[(0,t.jsx)(o.em,{children:(0,t.jsx)(o.strong,{children:"Ultron"})})," framework solves all these problems and do a lot more."]}),"\n",(0,t.jsx)(o.h2,{id:"ultron-compose",children:"Ultron Compose"}),"\n",(0,t.jsx)(o.p,{children:"Just create compose rule using Ultron static method"}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-kotlin",children:"@get:Rule\nval composeTestRule = createDefaultUltronComposeRule()\n"})}),"\n",(0,t.jsxs)(o.p,{children:["After that you're able to perform stable compose operations in ",(0,t.jsx)(o.strong,{children:"ANY"})," class. Just create a ",(0,t.jsx)(o.code,{children:"SemanticsMatcher"}),"(like ",(0,t.jsx)(o.code,{children:'hasTestTag("smth")'}),") and call an operation on it. e.g."]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-kotlin",children:'hasTestTag("Continue").click()\nhasText("Welcome").assertIsDisplayed()\n'})}),"\n",(0,t.jsxs)(o.p,{children:[(0,t.jsx)(o.code,{children:"SemanticsMatcher"})," object is used in Android Compose testing framework to find a target node to interact with."]}),"\n",(0,t.jsxs)(o.p,{children:["To launch an Activity use ",(0,t.jsx)(o.code,{children:"createUltronComposeRule<A>"})," or ",(0,t.jsx)(o.code,{children:"createSimpleUltronComposeRule<A>"})]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-kotlin",children:"@get:Rule\nval composeTestRule = createUltronComposeRule<YourActivity>()\n"})}),"\n",(0,t.jsxs)(o.p,{children:[(0,t.jsx)(o.code,{children:"createSimpleUltronComposeRule<A>"})," used ",(0,t.jsx)(o.code,{children:"UltronActivityRule"})," for launch and finish activity. You can read more in testconditions chapter"]})]})}function p(e={}){const{wrapper:o}={...(0,s.R)(),...e.components};return o?(0,t.jsx)(o,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,o,n)=>{n.d(o,{R:()=>i,x:()=>c});var t=n(6540);const s={},r=t.createContext(s);function i(e){const o=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function c(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(r.Provider,{value:o},e.children)}}}]);