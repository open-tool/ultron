"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[964],{7183:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>r,toc:()=>d});var i=t(4848),s=t(8453);const l={sidebar_position:6},o="Test Conditions Management",r={id:"android/testconditions",title:"Test Conditions Management",description:"It is a feature that includes 3 parts",source:"@site/docs/android/testconditions.md",sourceDirName:"android",slug:"/android/testconditions",permalink:"/ultron/docs/android/testconditions",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"withSuitableRoot",permalink:"/ultron/docs/android/rootview"},next:{title:"Allure",permalink:"/ultron/docs/common/allure"}},a={},d=[{value:"RuleSequence",id:"rulesequence",level:2},{value:"SetUpRule",id:"setuprule",level:2},{value:"Precondition for each tests",id:"precondition-for-each-tests",level:3},{value:"Precondition for specific test",id:"precondition-for-specific-test",level:3},{value:"TearDownRule",id:"teardownrule",level:2},{value:"Postcondition for all tests",id:"postcondition-for-all-tests",level:3},{value:"Postcondition for specific test",id:"postcondition-for-specific-test",level:3},{value:"Add your SetUps and TearDowns to Allure report",id:"add-your-setups-and-teardowns-to-allure-report",level:2},{value:"UltronActivityRule",id:"ultronactivityrule",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"test-conditions-management",children:"Test Conditions Management"}),"\n",(0,i.jsx)(n.p,{children:"It is a feature that includes 3 parts"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"RuleSequence"}),"\n",(0,i.jsx)(n.li,{children:"SetUpRule & TearDownRule"}),"\n",(0,i.jsx)(n.li,{children:"@SetUp @TearDown annotations"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Additional feature - UltronActivityRule for launch Activity before test and finish after"}),"\n",(0,i.jsx)(n.p,{children:"RuleSequence + SetUps & TearDowns for tests = full control of your tests"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"control the execution of pre- and postconditions of each test"}),"\n",(0,i.jsx)(n.li,{children:"control the moment of activity launching. It is one of the most  important point in android automation."}),"\n",(0,i.jsx)(n.li,{children:"don't write @Before and @After methods by changing it to the lambdas of SetUpRule or TearDownRule object"}),"\n",(0,i.jsx)(n.li,{children:"combine conditions of your test using annotations"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"rulesequence",children:"RuleSequence"}),"\n",(0,i.jsxs)(n.p,{children:["This rule is a modern replacement of JUnit 4 ",(0,i.jsx)(n.em,{children:"RuleChain"}),". It allows to control an order of rules execution."]}),"\n",(0,i.jsxs)(n.p,{children:["The RuleChain is not flexible. It is unpleasant to use RuleChain especially with class inheritance. That's why\n",(0,i.jsx)(n.a,{href:"https://github.com/alex-tiurin/ultron/blob/master/ultron/src/main/java/com/atiurin/ultron/testlifecycle/rulesequence/RuleSequence.kt",children:"RuleSequence"}),"\nhas been created."]}),"\n",(0,i.jsx)(n.p,{children:"The order of rules execution depends on its addition order.\nRuleSequence contains three rules lists with their own priority."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"first - rules from this list will be executed first of all"}),"\n",(0,i.jsx)(n.li,{children:"normal - rules will be added to this list by default"}),"\n",(0,i.jsx)(n.li,{children:"last - rules from this list will be executed last"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["It is recommended to create ",(0,i.jsx)(n.code,{children:"RuleSequence"})," in ",(0,i.jsx)(n.code,{children:"BaseTest"}),". You will be able to add rules to ",(0,i.jsx)(n.code,{children:"RuleSequence"})," in ",(0,i.jsx)(n.code,{children:"BaseTest"})," and in ",(0,i.jsx)(n.code,{children:"BaseTest"})," subclasses."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'abstract class BaseTest {\n    val setupRule = SetUpRule(name = "some name").add {\n            // some resonable precondition for all tests, eg login or smth like that\n        }\n\n    @get:Rule\n    open val ruleSequence = RuleSequence(setupRule)\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["It's better to add rules in subclasses inside ",(0,i.jsx)(n.code,{children:"init"})," section."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"class DemoTest : BaseTest() {\n    private val activityRule = ActivityScenarioRule(MainActivity::class.java)\n\n    init {\n        ruleSequence.addLast(activityRule)\n    }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note"}),": while using ",(0,i.jsx)(n.code,{children:"RuleSequence"}),"(as it was with ",(0,i.jsx)(n.code,{children:"RuleChain"}),") you don't need to specify ",(0,i.jsx)(n.code,{children:"@get:Rule"})," annotation for other rules."]}),"\n",(0,i.jsx)(n.p,{children:"Full code sample:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/alex-tiurin/ultron/blob/master/sample-app/src/androidTest/java/com/atiurin/sampleapp/tests/BaseTest.kt",children:"BaseTest"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/alex-tiurin/ultron/blob/master/sample-app/src/androidTest/java/com/atiurin/sampleapp/tests/espresso/DemoEspressoTest.kt",children:"DemoEspressoTest"})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["To learn more about order of rules execution see ",(0,i.jsx)(n.a,{href:"https://github.com/alex-tiurin/ultron/wiki/Deep-dive-into-rules-order-with-RuleSequence",children:"Deep dive into rules order with RuleSequence"})]}),"\n",(0,i.jsx)(n.h2,{id:"setuprule",children:"SetUpRule"}),"\n",(0,i.jsxs)(n.p,{children:["This rule allows you to specify lambdas which will be definitely invoked before a test is started.\nMoreover in combination with ",(0,i.jsx)(n.strong,{children:"RuleSequence"})," setup lambdas could be invoked before an activity is launched."]}),"\n",(0,i.jsx)(n.h3,{id:"precondition-for-each-tests",children:"Precondition for each tests"}),"\n",(0,i.jsxs)(n.p,{children:["Add lambda to ",(0,i.jsx)(n.code,{children:"SetUpRule"})," without any string key and it will be executed before each test in class."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'open val setupRule = SetUpRule("Login user rule")\n    .add(name = "Login valid user $CURRENT_USER") {\n        Log.info("Login valid user will be executed before any test is started")\n        AccountManager(InstrumentationRegistry.getInstrumentation().targetContext).login(\n            CURRENT_USER.login, CURRENT_USER.password\n        )\n    }\n'})}),"\n",(0,i.jsx)(n.h3,{id:"precondition-for-specific-test",children:"Precondition for specific test"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["add lambda with string key to ",(0,i.jsx)(n.code,{children:"SetUpRule"})]}),"\n",(0,i.jsxs)(n.li,{children:["add ",(0,i.jsx)(n.code,{children:"@SetUp"})," annotation with specified key to desired test"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'setupRule.add(FIRST_CONDITION){ \n    Log.info("$FIRST_CONDITION setup, executed for test with annotation @SetUp(FIRST_CONDITION)")  \n}\n\n@SetUp(FIRST_CONDITION)\n@Test\nfun someTest() {\n    // some test steps\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Attention"}),": dont forget to add ",(0,i.jsx)(n.code,{children:"SetUpRule"})," to ",(0,i.jsx)(n.code,{children:"RuleSequence"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"ruleSequence.add(setupRule)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"teardownrule",children:"TearDownRule"}),"\n",(0,i.jsx)(n.p,{children:"This rule allows you to specify lambdas which will be definitely invoked after a test is finished."}),"\n",(0,i.jsx)(n.h3,{id:"postcondition-for-all-tests",children:"Postcondition for all tests"}),"\n",(0,i.jsxs)(n.p,{children:["Add lambda to ",(0,i.jsx)(n.code,{children:"TearDownRule"})," without any string key and it will be executed after each test in class."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'open val tearDownRule = TearDownRule(name = "Logout user from app")\n    .add {\n        AccountManager(InstrumentationRegistry.getInstrumentation().targetContext).logout()\n    }\n'})}),"\n",(0,i.jsx)(n.h3,{id:"postcondition-for-specific-test",children:"Postcondition for specific test"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["add lambda with string key to ",(0,i.jsx)(n.code,{children:"TearDownRule"})]}),"\n",(0,i.jsxs)(n.li,{children:["add ",(0,i.jsx)(n.code,{children:"@TearDown"})," annotation with specified key to desired test"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'tearDownRule.add (LAST_CONDITION){ \n    Log.info("$LAST_CONDITION tearDown, executed for test with annotation @TearDown(LAST_CONDITION)")  \n}\n\n@TearDown(LAST_CONDITION)\n@Test\nfun someTest() {\n    // some test steps\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Attention"}),": dont forget to add ",(0,i.jsx)(n.code,{children:"TearDownRule"})," to ",(0,i.jsx)(n.code,{children:"RuleSequence"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"ruleSequence.addLast(tearDownRule)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"add-your-setups-and-teardowns-to-allure-report",children:"Add your SetUps and TearDowns to Allure report"}),"\n",(0,i.jsxs)(n.p,{children:["Lets clearly define a term ",(0,i.jsx)(n.strong,{children:"condition"}),". It's any code block that you've ",(0,i.jsx)(n.code,{children:"add"})," for",(0,i.jsx)(n.code,{children:"SetUpRule"})," or ",(0,i.jsx)(n.code,{children:"TearDownRule"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'SetUpRule(name = "sample set up").add { \n   //codition code\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"It's possible to add all SetUps and TearDowns to Allure report with applying a recommended config:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"UltronAllureConfig.applyRecommended()\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You can read about Allure configuration  ",(0,i.jsx)(n.a,{href:"/ultron/docs/common/allure",children:"here"})]}),"\n",(0,i.jsx)(n.p,{children:"What it gives us:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Rule ",(0,i.jsx)(n.code,{children:"name"})," param will be used as name of Allure step."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'SetUpRule(name = "External step name").add {...}\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Condition ",(0,i.jsx)(n.code,{children:"name"})," param will be used as a name of inner step"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'SetUpRule(name = "External step name").add(name = "Internal step name") { \n   //condition code\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"ultronactivityrule",children:"UltronActivityRule"}),"\n",(0,i.jsxs)(n.p,{children:["To start the activity you can use UltronActivityRule instead of ",(0,i.jsx)(n.code,{children:"androidx.test.ext.junit.rules.ActivityScenarioRule"})]}),"\n",(0,i.jsx)(n.p,{children:"The rule has the following advantages:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"finish all activities in RESUMED, PAUSED and STOPPED stage after test"}),"\n",(0,i.jsx)(n.li,{children:"does not await idle state for finish activity (fix infinity test execution in case AppNotIdleException)"}),"\n",(0,i.jsx)(n.li,{children:"has setup and teardown step in allure report"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"val activityRule = UltronActivityRule(YourActivity::class.java)\nruleSequence.add(activityRule)\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var i=t(6540);const s={},l=i.createContext(s);function o(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);